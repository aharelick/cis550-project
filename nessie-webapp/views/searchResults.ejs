<!DOCTYPE html>
<html>
<head>
<style type="text/css">
  #sigma-container {
    max-width: 100%;
    height: 400px;
    margin: auto;
  }
</style>
</head>
  <body> hello!
  <div id="sigma-container"></div>
  <script src="/sigma/sigma.js"></script>
  <script src="/sigma/plugins/sigma.parsers.json.min.js"></script>
  <script src="/sigma/plugins/sigma.layout.forceAtlas2.min.js"></script>
  <script>
    //Translate the JSON object to our format
    var formattedObj = {}; //The object that should be passed into searchResults
    var edgeCount = 0;

    var translate = function(paths) {
      formattedObj.nodes = [];
      formattedObj.edges = [];

      for (var i in paths) {
        var prevId = null;
        for (var j = 0; j < paths[i].length; j++) {
          var currID = paths[i][j]._id;

          //Make the node if it is new
          if (!nodeExists(currID)) {
            var node = {};
            node.id = currID;
            node.docID = paths[i][j].docId;
            node.label = paths[i][j].key;
            formattedObj.nodes.push(node);
          }

          //Add the edge to prev node
          if (j > 0) {
            //add an edge to preceeding node
            var edge = {};
            edge.id = edgeCount;
            edgeCount++;
            edge.source = prevId;
            edge.target = currID;
            formattedObj.edges.push(edge);
          }

          //Update the previous pointer in path
          prevId = currID;
        }
      }
    }

    //See if the node has been created already
    var nodeExists = function(id) {
      if (formattedObj != null) {
        if (formattedObj.nodes != null) {
          for (var i in formattedObj.nodes) {
            if (formattedObj.nodes[i].id === id) {
              return true;
            }
          }
        }
      }
      return false;
    }

    translate([
      [{"_id" : "a", "parent" : "b", "docId" : "http://", "key" : "apple", "neighbors" : "['a', 'b']"},
       {"_id" : "b", "parent" : "b", "docId" : "http://", "key" : "banana", "neighbors" : "['a', 'b']"},
       {"_id" : "c", "parent" : "b", "docId" : "http://", "key" : "clementine", "neighbors" : "['a', 'b']"}],
      [{"_id" : "a", "parent" : "b", "docId" : "http://", "key" : "apple", "neighbors" : "['a', 'b']"},
       {"_id" : "d", "parent" : "b", "docId" : "http://", "key" : "dog", "neighbors" : "['a', 'b']"},
       {"_id" : "f", "parent" : "b", "docId" : "http://", "key" : "fruit", "neighbors" : "['a', 'b']"},
       {"_id" : "b", "parent" : "b", "docId" : "http://", "key" : "banana", "neighbors" : "['a', 'b']"}
      ]]);
    console.log(formattedObj);

    // these are just some preliminary settings 
    var g = {
        nodes: [],
        edges: []
    };

   // Create new Sigma instance in graph-container div (use your div name here) 
   s = new sigma({
   graph: formattedObj,
   container: 'sigma-container',
   renderer: {
    container: document.getElementById('sigma-container'),
    type: 'canvas'
   },
   settings: {
    minNodeSize: 8,
    maxNodeSize: 16
   }
   });

   //Currently reading JSON from file - but read from wherever...
    var nodes = s.graph.nodes();
    var len = nodes.length;

    for (var i = 0; i < len; i++) {
      nodes[i].x = Math.random();
      nodes[i].y = Math.random();
      nodes[i].size = s.graph.degree(nodes[i].id);
      nodes[i].color = nodes[i].center ? '#333' : '#666';
    }
    s.refresh();
    s.startForceAtlas2();

    function onClick(event) {
      window.console.log("clicked!");
      window.console.log(event)
    } 

    //When a node is double clicked, the document is opened
    s.bind('doubleClickNode', function(e) {
        console.log(e.data.node.docID);
        window.open(e.data.node.docID);
    });



  </script>
  </body>

</html>